package vod

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListAIVideoPornRecogJob invokes the vod.ListAIVideoPornRecogJob API synchronously
// api document: https://help.aliyun.com/api/vod/listaivideopornrecogjob.html
func (client *Client) ListAIVideoPornRecogJob(request *ListAIVideoPornRecogJobRequest) (response *ListAIVideoPornRecogJobResponse, err error) {
	response = CreateListAIVideoPornRecogJobResponse()
	err = client.DoAction(request, response)
	return
}

// ListAIVideoPornRecogJobWithChan invokes the vod.ListAIVideoPornRecogJob API asynchronously
// api document: https://help.aliyun.com/api/vod/listaivideopornrecogjob.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) ListAIVideoPornRecogJobWithChan(request *ListAIVideoPornRecogJobRequest) (<-chan *ListAIVideoPornRecogJobResponse, <-chan error) {
	responseChan := make(chan *ListAIVideoPornRecogJobResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListAIVideoPornRecogJob(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListAIVideoPornRecogJobWithCallback invokes the vod.ListAIVideoPornRecogJob API asynchronously
// api document: https://help.aliyun.com/api/vod/listaivideopornrecogjob.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) ListAIVideoPornRecogJobWithCallback(request *ListAIVideoPornRecogJobRequest, callback func(response *ListAIVideoPornRecogJobResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListAIVideoPornRecogJobResponse
		var err error
		defer close(result)
		response, err = client.ListAIVideoPornRecogJob(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListAIVideoPornRecogJobRequest is the request struct for api ListAIVideoPornRecogJob
type ListAIVideoPornRecogJobRequest struct {
	*requests.RpcRequest
	ResourceOwnerId        string `position:"Query" name:"ResourceOwnerId"`
	ResourceOwnerAccount   string `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount           string `position:"Query" name:"OwnerAccount"`
	AIVideoPornRecogJobIds string `position:"Query" name:"AIVideoPornRecogJobIds"`
	OwnerId                string `position:"Query" name:"OwnerId"`
}

// ListAIVideoPornRecogJobResponse is the response struct for api ListAIVideoPornRecogJob
type ListAIVideoPornRecogJobResponse struct {
	*responses.BaseResponse
	RequestId               string                  `json:"RequestId" xml:"RequestId"`
	NonExistPornRecogJobIds NonExistPornRecogJobIds `json:"NonExistPornRecogJobIds" xml:"NonExistPornRecogJobIds"`
	AIVideoPornRecogJobList AIVideoPornRecogJobList `json:"AIVideoPornRecogJobList" xml:"AIVideoPornRecogJobList"`
}

// CreateListAIVideoPornRecogJobRequest creates a request to invoke ListAIVideoPornRecogJob API
func CreateListAIVideoPornRecogJobRequest() (request *ListAIVideoPornRecogJobRequest) {
	request = &ListAIVideoPornRecogJobRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("vod", "2017-03-21", "ListAIVideoPornRecogJob", "vod", "openAPI")
	return
}

// CreateListAIVideoPornRecogJobResponse creates a response to parse from ListAIVideoPornRecogJob response
func CreateListAIVideoPornRecogJobResponse() (response *ListAIVideoPornRecogJobResponse) {
	response = &ListAIVideoPornRecogJobResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
