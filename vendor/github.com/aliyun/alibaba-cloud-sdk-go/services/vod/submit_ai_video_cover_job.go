package vod

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// SubmitAIVideoCoverJob invokes the vod.SubmitAIVideoCoverJob API synchronously
// api document: https://help.aliyun.com/api/vod/submitaivideocoverjob.html
func (client *Client) SubmitAIVideoCoverJob(request *SubmitAIVideoCoverJobRequest) (response *SubmitAIVideoCoverJobResponse, err error) {
	response = CreateSubmitAIVideoCoverJobResponse()
	err = client.DoAction(request, response)
	return
}

// SubmitAIVideoCoverJobWithChan invokes the vod.SubmitAIVideoCoverJob API asynchronously
// api document: https://help.aliyun.com/api/vod/submitaivideocoverjob.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) SubmitAIVideoCoverJobWithChan(request *SubmitAIVideoCoverJobRequest) (<-chan *SubmitAIVideoCoverJobResponse, <-chan error) {
	responseChan := make(chan *SubmitAIVideoCoverJobResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.SubmitAIVideoCoverJob(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// SubmitAIVideoCoverJobWithCallback invokes the vod.SubmitAIVideoCoverJob API asynchronously
// api document: https://help.aliyun.com/api/vod/submitaivideocoverjob.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) SubmitAIVideoCoverJobWithCallback(request *SubmitAIVideoCoverJobRequest, callback func(response *SubmitAIVideoCoverJobResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *SubmitAIVideoCoverJobResponse
		var err error
		defer close(result)
		response, err = client.SubmitAIVideoCoverJob(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// SubmitAIVideoCoverJobRequest is the request struct for api SubmitAIVideoCoverJob
type SubmitAIVideoCoverJobRequest struct {
	*requests.RpcRequest
	UserData             string `position:"Query" name:"UserData"`
	ResourceOwnerId      string `position:"Query" name:"ResourceOwnerId"`
	ResourceOwnerAccount string `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount         string `position:"Query" name:"OwnerAccount"`
	OwnerId              string `position:"Query" name:"OwnerId"`
	MediaId              string `position:"Query" name:"MediaId"`
	AIVideoCoverConfig   string `position:"Query" name:"AIVideoCoverConfig"`
}

// SubmitAIVideoCoverJobResponse is the response struct for api SubmitAIVideoCoverJob
type SubmitAIVideoCoverJobResponse struct {
	*responses.BaseResponse
	RequestId       string          `json:"RequestId" xml:"RequestId"`
	AIVideoCoverJob AIVideoCoverJob `json:"AIVideoCoverJob" xml:"AIVideoCoverJob"`
}

// CreateSubmitAIVideoCoverJobRequest creates a request to invoke SubmitAIVideoCoverJob API
func CreateSubmitAIVideoCoverJobRequest() (request *SubmitAIVideoCoverJobRequest) {
	request = &SubmitAIVideoCoverJobRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("vod", "2017-03-21", "SubmitAIVideoCoverJob", "vod", "openAPI")
	return
}

// CreateSubmitAIVideoCoverJobResponse creates a response to parse from SubmitAIVideoCoverJob response
func CreateSubmitAIVideoCoverJobResponse() (response *SubmitAIVideoCoverJobResponse) {
	response = &SubmitAIVideoCoverJobResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
