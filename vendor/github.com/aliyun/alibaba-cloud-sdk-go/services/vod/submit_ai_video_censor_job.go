package vod

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// SubmitAIVideoCensorJob invokes the vod.SubmitAIVideoCensorJob API synchronously
// api document: https://help.aliyun.com/api/vod/submitaivideocensorjob.html
func (client *Client) SubmitAIVideoCensorJob(request *SubmitAIVideoCensorJobRequest) (response *SubmitAIVideoCensorJobResponse, err error) {
	response = CreateSubmitAIVideoCensorJobResponse()
	err = client.DoAction(request, response)
	return
}

// SubmitAIVideoCensorJobWithChan invokes the vod.SubmitAIVideoCensorJob API asynchronously
// api document: https://help.aliyun.com/api/vod/submitaivideocensorjob.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) SubmitAIVideoCensorJobWithChan(request *SubmitAIVideoCensorJobRequest) (<-chan *SubmitAIVideoCensorJobResponse, <-chan error) {
	responseChan := make(chan *SubmitAIVideoCensorJobResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.SubmitAIVideoCensorJob(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// SubmitAIVideoCensorJobWithCallback invokes the vod.SubmitAIVideoCensorJob API asynchronously
// api document: https://help.aliyun.com/api/vod/submitaivideocensorjob.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) SubmitAIVideoCensorJobWithCallback(request *SubmitAIVideoCensorJobRequest, callback func(response *SubmitAIVideoCensorJobResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *SubmitAIVideoCensorJobResponse
		var err error
		defer close(result)
		response, err = client.SubmitAIVideoCensorJob(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// SubmitAIVideoCensorJobRequest is the request struct for api SubmitAIVideoCensorJob
type SubmitAIVideoCensorJobRequest struct {
	*requests.RpcRequest
	UserData             string `position:"Query" name:"UserData"`
	ResourceOwnerId      string `position:"Query" name:"ResourceOwnerId"`
	AIVideoCensorConfig  string `position:"Query" name:"AIVideoCensorConfig"`
	ResourceOwnerAccount string `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount         string `position:"Query" name:"OwnerAccount"`
	OwnerId              string `position:"Query" name:"OwnerId"`
	MediaId              string `position:"Query" name:"MediaId"`
}

// SubmitAIVideoCensorJobResponse is the response struct for api SubmitAIVideoCensorJob
type SubmitAIVideoCensorJobResponse struct {
	*responses.BaseResponse
	RequestId        string           `json:"RequestId" xml:"RequestId"`
	AIVideoCensorJob AIVideoCensorJob `json:"AIVideoCensorJob" xml:"AIVideoCensorJob"`
}

// CreateSubmitAIVideoCensorJobRequest creates a request to invoke SubmitAIVideoCensorJob API
func CreateSubmitAIVideoCensorJobRequest() (request *SubmitAIVideoCensorJobRequest) {
	request = &SubmitAIVideoCensorJobRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("vod", "2017-03-21", "SubmitAIVideoCensorJob", "vod", "openAPI")
	return
}

// CreateSubmitAIVideoCensorJobResponse creates a response to parse from SubmitAIVideoCensorJob response
func CreateSubmitAIVideoCensorJobResponse() (response *SubmitAIVideoCensorJobResponse) {
	response = &SubmitAIVideoCensorJobResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
